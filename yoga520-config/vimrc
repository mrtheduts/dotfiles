" mrtheduts' vimrc
" inspired by Doug Black's https://dougblack.io/words/a-good-vimrc.html

" Plugins {{{
if has('nvim')

    call plug#begin('~/.local/share/nvim/plugged')

    " Aerojump - Easier (fuzzy) navigation in file
    Plug 'philip-karlsson/aerojump.nvim', { 
    \ 'do': ':UpdateRemotePlugins' 
    \ }

    " Conquer Of Completion - Language Server Protocol
    Plug 'neoclide/coc.nvim', {
    \ 'branch': 'release'
    \ }
    
    " Colorizer - Color Preview
    Plug 'chrisbra/Colorizer'

    " CtrlP - Fuzzy File Search
    Plug 'ctrlpvim/ctrlp.vim'

    " Doorboy - Autoclose brackets
    Plug 'itmammoth/doorboy.vim'

    " Goyo - Distraction free vim
    Plug 'junegunn/goyo.vim'

    " Gundo - View vim undo tree
    Plug 'sjl/gundo.vim'

    " Gruvbox - Vim theme
    Plug 'morhetz/gruvbox'

    " IndentLine - pretty self explicatory
    Plug 'Yggdroot/indentLine'

    " Markdown-Preview
    Plug 'iamcco/markdown-preview.nvim', { 
    \ 'do': 'cd app & yarn install'
    \ }

    " NerdCommenter - Commenting Plugin
    Plug 'scrooloose/nerdcommenter'

    " Nerdtree file navigator
    Plug 'scrooloose/nerdtree'

    " Nerdtree git integration
    Plug 'Xuyuanp/nerdtree-git-plugin'

    " vim-Airline - Status line for vim
    Plug 'vim-airline/vim-airline'
    "Plug 'vim-airline/vim-airline-themes'

    " vim-Autotag - Update ctags
    Plug 'craigemery/vim-autotag'

    " vim-Clang-Format - C family lint
    Plug 'rhysd/vim-clang-format'

    " vim-Closetag - Autoclose (X)HTML tags
    Plug 'alvan/vim-closetag'

    " vim-Fugitive - Git wrapper
    Plug 'tpope/vim-fugitive'

    " vim-Grepper - Use Ag (grep inside multiple files) inside nvim
    Plug 'mhinz/vim-grepper'

    " vim-LSP-CXX-Highlight
    Plug 'jackguo380/vim-lsp-cxx-highlight'

    " vim-Pencil - Different word wrappers
    Plug 'reedes/vim-pencil'

    " vim-Polyglot
    " A Collection of language packs for Vim
    " One to rule them all
    Plug 'sheerun/vim-polyglot'

    " Snippets are separated from the engine. Add this if you want them:
    Plug 'honza/vim-snippets'

    call plug#end()

endif
" }}}

" Colour {{{
if has('nvim')

    " These configs have to be loaded before gruvbox plugin
    let g:gruvbox_italic = '1'

    let g:gruvbox_number_column = 'bg0'
    let g:gruvbox_sign_column = 'bg0'

    let g:gruvbox_invert_signs = '1'
    
    " True Color output
    set termguicolors

    " Set theme
    colorscheme gruvbox
    let g:airline_theme='gruvbox'

    " c++ syntax highlighting
    let g:cpp_class_scope_highlight = 1
    let g:cpp_member_variable_highlight = 1
    let g:cpp_class_decl_highlight = 1

endif
" }}}

" Folding {{{

    " Enable folding
    set foldenable

    " Open most folds by default
    set foldlevelstart=10

    " 10 nested fold max
    set foldnestmax=10

    " Fold based on indent level
    set foldmethod=indent

" }}}

" Misc {{{

    " Enable syntax processing
    syntax enable

    " Enable line for file-specifc configuration
    set modelines=1

    " Scrolloff
    set scrolloff=20

if has('nvim')
    
    " Add coc status on statusline
    set statusline^=%{coc#status()}

    " Prevents snippets to conceal latex commands as single characters
    let g:tex_conceal = ""

endif
" }}}

" Remaping {{{

" Misc {{{

    " Enable Writer Mode
    nnoremap <Leader>w :PencilSoft<CR>:Goyo<CR>

    " WARNING
    " jk is esc
    inoremap jk <esc>

    " Clipboard mapping
    " Copy and paste to/from system clipboard
    noremap <Leader>y "+y
    noremap <Leader>p "+p

    " Turn off search highlight
    nnoremap <leader>/ :nohlsearch<CR>

    " C Lang Formatting
    nnoremap <Leader>f :<C-u>ClangFormat<CR>

" }}}

" Movement {{{

    " Move vertically by visual line
    nnoremap j gj
    nnoremap k gk

    " Move to beginning/end of line
    nnoremap B ^
    nnoremap E $

    " $/^ doesn't do anything
    nnoremap $ <nop>
    nnoremap ^ <nop>

    " Switch between buffers easily with tab and shift+tab
    nnoremap <TAB> :bnext<CR>
    nnoremap <S-TAB> :bprev<CR>

    " Jump between splits more easily
    " Up
    nnoremap <C-k> <C-w>k
    " Down
    nnoremap <C-j> <C-w>j
    " Right
    nnoremap <C-l> <C-w>l
    " Left
    nnoremap <C-h> <C-w>h

" }}}

" Splits {{{

    " Increase split window height
    nnoremap <Leader>k <C-w>+
    " Decrease split window height
    nnoremap <Leader>j <C-w>-
    " Increase split window width
    nnoremap <Leader>l <C-w>>
    " Decrease split window width
    nnoremap <Leader>h <C-w><

" }}}

" }}}

" Spaces & Tabs {{{

    " Number of visual spaces per TAB
    set tabstop=4

    " Number of spaces in tab when editing
    set softtabstop=4

    " Tabs are spaces
    set expandtab

    " Set shift width to 4 spaces
    set shiftwidth=4

    " Set autoindent on
    set autoindent

    " Set tab space the same as the line above
    set smarttab

    " Set tab for 2 in specific files
    autocmd FileType python setlocal shiftwidth=2 tabstop=2 softtabstop=2
    autocmd FileType typescriptreact setlocal shiftwidth=2 tabstop=2 softtabstop=2
    autocmd FileType typescript setlocal shiftwidth=2 tabstop=2 softtabstop=2
    autocmd FileType cpp setlocal shiftwidth=2 tabstop=2 softtabstop=2

" }}}

" Searching {{{

    " Search as characters are entered
    set incsearch

    " Highlight matches
    set hlsearch

" }}}

" UI Layout {{{

    " Show line numbers as relative
    :set number relativenumber

    " Show relative lines only on current file
    :augroup numbertoggle
    :  autocmd!
    :  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    :  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
    :augroup END

    " Show command in bottom bar
    set showcmd

    " Highlight current line
    set cursorline

    " Load filetype-specific ident files
    filetype indent on

    " Visual autocomplete for command menu
    set wildmenu

    " Redraw only when we need to
    set lazyredraw

    " Highlight matching [{()}]
    set showmatch

    " Default mode indicator FINALLY OFF
    set noshowmode

" }}}

" Plugins Config {{{

" Aerojump {{{
if has('nvim')

    " Fuzzy search in file
    nmap <space> <plug>(AerojumpDefault)
    nmap <leader><space> <plug>(AerojumpBolt)

endif

" }}}

" Conquer of Completion {{{
if has('nvim')

    " Without it, TextEdit might fail
    set hidden

    " Some servers have issues with backup files
    set nobackup
    set nowritebackup

    " Better display for messages
    set cmdheight=2

    " You will have bad experience for diagnostic messages 
    " when it's default 4000.
    set updatetime=300

    " don't give |ins-completion-menu| messages.
    set shortmess+=c

    " Always show the signcolumn, otherwise it would shift the text each time
    " diagnostics appear/become resolved.
    if has("patch-8.1.1564")
      " Recently vim can merge signcolumn and number column into one
      set signcolumn=number
    else
      set signcolumn=yes
    endif

    " Use tab for trigger completion with characters ahead and navigate.
    " Use command ':verbose imap <tab>' to make sure tab is not mapped
    " by other plugin.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    
    " Use <c-space> to trigger completion.
    inoremap <silent><expr> <c-space> coc#refresh()

    " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
    " position. Coc only does snippet and additional edit on confirm.
    " <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
    if exists('*complete_info')
      inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u" . doorboy#map_cr()
    else
      inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u" . doorboy#map_cr()
    endif

    " Use K to show documentation in preview window
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
        if (index(['vim','help'], &filetype) >= 0)
            execute 'h '.expand('<cword>')
        else
            call CocAction('doHover')
        endif
    endfunction

    " Highlight symbol under cursor on CursorHold
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Symbol renaming.
    nmap <leader>rn <Plug>(coc-rename)

    " Using CocList
    " Show all diagnostics
    nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
    " Show commands
    nnoremap <silent> <space>c  :<C-u>CocList commands<cr>

    " Remap keys for gotos
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " CocActions
    nmap <silent> <leader>a :<C-u>CocCommand actions.open<CR>

    " Apply AutoFix to problem on the current line.
    nmap <leader>qf  <Plug>(coc-fix-current)

    " TeXLab build shortcut
    nnoremap <silent> <leader>lb :<C-u>CocCommand latex.Build<cr>

    " clangd swap between header and file
    nnoremap <silent> <leader>h :<C-u>CocCommand clangd.switchSourceHeader<cr>

endif

" }}}

" Colorizer {{{
if has('nvim')

    " Colorize automatically some filetypes
    let g:colorizer_auto_filetype='css,html,typescriptreact'

endif
" }}}

" CtrlP settings {{{
if has('nvim')

    let g:ctrlp_match_window = 'bottom,order:ttb'
    let g:ctrlp_switch_buffer = 0
    let g:ctrlp_working_path_mode = 0

    " Tweak CtrlP speed with Ag
    let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

endif

" }}}

" Doorboy {{{
if has('nvim')

    "Add $ as a bracket in LaTeX files
    let g:doorboy_additional_quotations = {
        \ 'tex': ['$']
    \ }

endif
" }}}

" IndentLine {{{
if has('nvim')

    " Set indent chars list
    let g:indentLine_char_list = ['|', '¦', '┆', '┊']

endif
" }}}

" Gundo {{{
if has('nvim')

    " Window appears on the right side
    let g:gundo_right = 1

    " Diff appears on the bottom
    let g:gundo_preview_bottom = 1

    " Remap to toggle Gundo
    nnoremap <leader>u :GundoToggle<CR>

endif

" }}}

" NerdCommenter {{{
if has('nvim')

    " Necessary 
    filetype plugin on

    " Add spaces after comment delimiters by default
    let g:NERDSpaceDelims = 1

    " Enable trimming of trailing whitespace when uncomment
    let g:NERDTrimTrailingWhitespace = 1

endif
" }}}

" Nerdtree settings {{{
if has('nvim')

    map <C-n> :NERDTreeToggle<CR>

    " Open nerdtree if nvim opened a directory
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

    " Close nerdtree when file is opened
    let NERDTreeQuitOnOpen = 1
    " Automatically delete the buffer of the file you just deleted in nerdtree
    let NERDTreeAutoDeleteBuffer = 1

endif

" }}}

" vim-Airline {{{
if has('nvim')

    " Enable top tabline
    let g:airline#extensions#tabline#enabled = 1

    " Enable powerline fonts
    let g:airline_powerline_fonts = 1

    " Enable coc integration
    let g:airline#extensions#coc#enabled = 1

endif

" }}}

" vim-AutoCtags {{{
if has('nvim')

    " Generate them with ctags and add them here
    "set tags+=$HOME/Git/unicamp/EmuParadise
    "
endif

" }}}

" vim-Closetag {{{
if has('nvim')

    " Enable autoclose for specific files
    let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.tsx'

endif
" }}}

" vim-Grepper {{{

if has('nvim')

    " Mapping to Grepper on opened buffers
    nnoremap <leader>g :Grepper -tool ag -buffers<cr>
    " Map to Grepper with Ag
    nnoremap <leader>G :Grepper -tool ag<cr>

endif

" }}}


" }}}

" Open this file with folded Sections
" vim:foldmethod=marker:foldlevel=0
